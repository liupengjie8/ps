/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2019-10-29 10:54:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.webpage.stand.ope.flowcharts;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class flowchart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

private static org.apache.jasper.runtime.ProtectedFunctionMapper _jspx_fnmap_0;

static {
  _jspx_fnmap_0= org.apache.jasper.runtime.ProtectedFunctionMapper.getMapForFunction("fns:getAdminPath", com.jeeplus.common.config.Global.class, "getAdminPath", new Class[] {});
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/WEB-INF/tlds/menu.tld", Long.valueOf(1565601181978L));
    _jspx_dependants.put("/webpage/include/taglib.jsp", Long.valueOf(1565601231143L));
    _jspx_dependants.put("/WEB-INF/tlds/fns.tld", Long.valueOf(1566895038156L));
    _jspx_dependants.put("/WEB-INF/tlds/shiros.tld", Long.valueOf(1565601182005L));
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write('\n');
      if (_jspx_meth_c_005fset_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta name=\"decorator\" content=\"ani\">\r\n");
      out.write("<title>demo</title>\r\n");
      out.write("<script src=\"https://cdn.staticfile.org/axios/0.18.0/axios.min.js\"></script>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctxStatic}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/common/js/flowcharts/ramda.min.js\"></script>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctxStatic}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/common/js/flowcharts/snap.svg-min.js\"></script>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctxStatic}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/common/js/flowcharts/vue.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctxStatic}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/common/css/flowcharts/tree.css\" />\r\n");
      out.write("<script>var __ = R.__ </script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"wrapper wrapper-content\"> \r\n");
      out.write("\t<!-- 栏目1\t-->\r\n");
      out.write("\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t<div class=\"panel panel-primary\"> \r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<!-- 标题end\t--> \r\n");
      out.write("\t\t\t\t\t<!--表格内容-->\r\n");
      out.write("\t\t\t\t\t<div class=\"panel-body\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"row m-b20 \">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"bars pull-right\">\r\n");
      out.write("\t\t\t\t\t\t\t\t    <button id=\"btn_select_column\" class=\"btn btn-primary\" onclick=\"selectColumn()\"> <i class=\"glyphicon glyphicon-plus\"></i> 自定义筛选条件 </button>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div id=\"select_column\" style='display:none;' class=\"row\">\r\n");
      out.write("\t\t\t\t\t\t\t<div id='cascadebox' style=\"padding:0;\" class=\"col-sm-8\">\r\n");
      out.write("\t                          \r\n");
      out.write("\t                        </div>\r\n");
      out.write("\t                        <button class=\"btn btn-primary\" onclick=\"cancelSelectColumn()\">收起</button>\r\n");
      out.write("\t                        <button class=\"btn btn-primary\" onclick=\"confirmSelectColumn()\">确认</button>\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <form id=\"searchForm\" modelAttribute=\"opeColumn\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"row\" id=\"selectRow1\">\r\n");
      out.write("\t\t\t\t\t\t    \r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-xs-1-5\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div class=\"col-md-12 update-align-items \">患者id</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<input class=\"form-control \" type=\"text\" value=\"\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tname=\"patientId\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-xs-1-5\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div class=\"col-md-12 update-align-items \">身份</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<select id=\"selectType\" name=\"identity\" class=\"form-control \"><option\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tvalue=\"\">全部</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"城乡居民\">城乡居民</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"城镇职工\">城镇职工</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"军以上干部\">军以上干部</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"免费家属\">免费家属</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"免费职工\">免费职工</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"师以上退休\">师以上退休</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"师职干部\">师职干部</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"士兵\">士兵</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"司局级干部\">司局级干部</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"随军家属\">随军家属</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"团以下干部\">团以下干部</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"团以下退休\">团以下退休</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"一般人员\">一般人员</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"优惠家属\">优惠家属</option></select>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-xs-1-5\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div class=\"col-md-12 update-align-items \">费别</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div class=\"col-md-12\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<select id=\"selectType\" name=\"chargeType\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tclass=\"form-control \"><option value=\"\">全部</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"地方公疗\">地方公疗</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"地方医保\">地方医保</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"军队医改\">军队医改</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"全费\">全费</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"特需服务\">特需服务</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"武警医改\">武警医改</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<option value=\"异地医保\">异地医保</option></select>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"bars pull-right\">\r\n");
      out.write("\t\t\t\t\t\t\t<button id=\"search\" class=\"btn btn-primary\" onclick=\"search()\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<i class=\"glyphicon glyphicon-search\"></i> 查询\r\n");
      out.write("\t\t\t\t\t\t\t</button>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<div class=\"tree_head\">\r\n");
      out.write("\t\t\t<div class=\"tree_nav_list\">\r\n");
      out.write("\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t<li id=\"flow-back\"><a href=\"#\"><img\r\n");
      out.write("\t\t\t\t\t\t\tsrc=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctxStatic}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/common/img/flowcharts/btn-left.png\" alt=\"\"></a></li>\r\n");
      out.write("\t\t\t\t\t<li id=\"flow-next\"><a href=\"#\"><img\r\n");
      out.write("\t\t\t\t\t\t\tsrc=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctxStatic}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/common/img/flowcharts/btn-right.png\" alt=\"\"></a></li>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<div id=\"board\" class=\"board\" :style=\"board\">\r\n");
      out.write("\r\n");
      out.write("\t\t<svg ref=\"svg\"></svg>\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"node\" v-for=\"node in nodes\" :style=\"position(node)\">\r\n");
      out.write("\t\t\t<!--    示例     -->\r\n");
      out.write("\t\t\t<ul class=\"tree_ico_list\">\r\n");
      out.write("\t\t\t\t<li v-if=\"node.documentUrl\"><a :href=\"node.documentUrl\"\r\n");
      out.write("\t\t\t\t\ttarget=\"_blank\"><img\r\n");
      out.write("\t\t\t\t\t\tsrc=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctxStatic}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/common/img/flowcharts/tree-ico.png\" /></a></li>\r\n");
      out.write("\t\t\t\t<li v-if=\"node.nextLowLevel\"\r\n");
      out.write("\t\t\t\t\t@click.stop=\"loadNewPage(node.nextLowLevel)\"><img\r\n");
      out.write("\t\t\t\t\tsrc=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctxStatic}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/common/img/flowcharts/tree-ico1.png\" /></li>\r\n");
      out.write("\t\t\t\t<li v-if=\"node.description\" class=\"elastic\"><img\r\n");
      out.write("\t\t\t\t\tsrc=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctxStatic}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/common/img/flowcharts/tree-ico2.png\" />\r\n");
      out.write("\t\t\t\t\t<div class=\"tree_main\">{{ node.description }}</div></li>\r\n");
      out.write("\t\t\t\t<li v-if=\"node.status ==0\"><img\r\n");
      out.write("\t\t\t\t\tsrc=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctxStatic}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/common/img/flowcharts/tree-ico3.png\" @click.stop=\"goDetail(node)\"/></li>\r\n");
      out.write("\t\t\t</ul>\r\n");
      out.write("\t\t\t<p class=\"text\">{{ node.text }}</p>\r\n");
      out.write("\t\t\t<div class=\"tit\">{{ node.title }}</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"symbol\" v-for=\"symbol in symbols\"\r\n");
      out.write("\t\t\t:style=\"positionSymbol(symbol)\">{{ symbol.title }}</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t$(function(){\r\n");
      out.write("\t\t$(\".page_title\",parent.document).html(\"手术服务流程监测\");\r\n");
      out.write("\t})\r\n");
      out.write("\tfunction selectColumn(){\r\n");
      out.write("\t\t$(\"#select_column\").css('display','block');\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction cancelSelectColumn(){\r\n");
      out.write("\t\t$(\"#select_column\").css('display','none');\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction confirmSelectColumn(){\r\n");
      out.write("\t\t$(\"#select_column\").css('display','none');\r\n");
      out.write("\t\tvar column_ids=obj.get_data();//选中id数组\r\n");
      out.write("\t\tvar ids=\"\";\r\n");
      out.write("\t\tfor(var i=0;i<column_ids.length;i++){\r\n");
      out.write("\t\t\tids+=column_ids[i]+\",\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl:\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/opecolumn/opeColumn/getColumnListByIds\",\r\n");
      out.write("\t\t\ttype:\"post\",\r\n");
      out.write("\t\t\tdata:{ids:ids},\r\n");
      out.write("\t\t\tdataType:\"json\",\r\n");
      out.write("\t\t\tsuccess:function(res){\t\r\n");
      out.write("\t\t\t\tvar columnList=res;\r\n");
      out.write("\t\t\t\t$(\"#selectRow1\").html('');\r\n");
      out.write("\t\t\t\tvar htmlRow1='<form id=\"searchForm\" modelAttribute=\"opeColumn\">';\r\n");
      out.write("\t\t\t\tfor(var i=0;i<columnList.length;i++){\r\n");
      out.write("\t\t\t\t\tvar column = columnList[i];\r\n");
      out.write("\t\t\t\t\tif(column.columnType=='文本'){\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"col-xs-1-5\">'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"form-group\">'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"col-md-12 update-align-items \">'+column.columnName+'</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"col-md-12\">'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<input  class=\"form-control \" type=\"text\" value=\"\" name=\"'+column.columnCode+'\">'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif(column.columnType=='下拉'){\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"col-xs-1-5\">'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"form-group\">'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"col-md-12 update-align-items \">'+column.columnName+'</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"col-md-12\">'\r\n");
      out.write("\t\t\t\t\t\tvar options = column.options;\r\n");
      out.write("\t\t\t\t\t\toptions=options.split('*#');\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<select id=\"selectType\" name=\"'+column.columnCode+'\" class=\"form-control \">'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<option value=\"\">全部</option>'\r\n");
      out.write("\t\t\t\t\t\tfor(var j=0;j<options.length;j++){\r\n");
      out.write("\t\t\t\t\t\t\thtmlRow1+='<option value=\"'+options[j]+'\">'+options[j]+'</option>'\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</select>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif(column.columnType=='时间'){\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"col-xs-1-5\">'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"input-group \" >'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"col-md-12 update-align-items \">'+column.columnName+'-起</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"col-md-12 \">'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<input  class=\"form-control form_datetime\" type=\"text\" value=\"\" name=\"'+column.columnCode+'Start\">'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"col-xs-1-5\">'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"input-group\">'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"col-md-12 update-align-items \">'+column.columnName+'-止</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<div class=\"col-md-12 \">'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='<input  class=\"form-control form_datetime\" type=\"text\" value=\"\" name=\"'+column.columnCode+'End\">'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t\thtmlRow1+='</div>'\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\thtmlRow1+='</form>'\r\n");
      out.write("\t\t\t\t$(\"#selectRow1\").html(htmlRow1);\r\n");
      out.write("\t\t\t\tlay('.form_datetime').each(function(){\r\n");
      out.write("\t\t\t\t    laydate.render({\r\n");
      out.write("\t\t\t\t      elem: this\r\n");
      out.write("\t\t\t\t      ,trigger: 'click'\r\n");
      out.write("\t\t\t\t    });\r\n");
      out.write("\t\t\t\t  });\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t$(function(){\r\n");
      out.write("\t    var data = [];\r\n");
      out.write("\t    //获取字段合集\r\n");
      out.write("\t     $.ajax({\r\n");
      out.write("\t\t\turl:\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/opecolumn/opeColumn/getAllColumnList\",\r\n");
      out.write("\t\t\ttype:\"post\",\r\n");
      out.write("\t\t\tdataType:\"json\",\r\n");
      out.write("\t\t\tdata:{},\r\n");
      out.write("\t\t\tsuccess:function(res){\t\r\n");
      out.write("\t\t\t\tvar parentlist = res.parentlist;\r\n");
      out.write("\t\t\t\tfor(var i=0;i<parentlist.length;i++){\r\n");
      out.write("\t\t\t\tdata.push(parentlist[i]);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tvar childlist = res.childlist;\r\n");
      out.write("\t\t\t\tfor(var i=0;i<childlist.length;i++){\r\n");
      out.write("\t\t\t\t\tdata.push(childlist[i]);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tobj = cascadeBox('cascadebox','checkboxname',data,[],[],true,true,null);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tfail:function(err){\r\n");
      out.write("\t\t\t\tconsole.log(err);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\t\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t    \r\n");
      out.write("        const nodeWidth = 150       //节点宽度\r\n");
      out.write("        const nodeHeight = 100      //节点高度\r\n");
      out.write("        const colWidth = 200        //列宽\r\n");
      out.write("        const rowHeight = 200       //行高\r\n");
      out.write("        const symbolSide = 30       //符号边长\r\n");
      out.write("        \r\n");
      out.write("        // 获取起止点坐标\r\n");
      out.write("        function points (n1, n2) {\r\n");
      out.write("            if (n2.col > n1.col) {\r\n");
      out.write("                return [rightMiddle(n1), leftMiddle(n2)]\r\n");
      out.write("            } else if (n2.col < n1.col){\r\n");
      out.write("                return [leftMiddle(n1), rightMiddle(n2)]\r\n");
      out.write("            } else if (n2.row > n1.row){\r\n");
      out.write("                return [bottomMiddle(n1), topMiddle(n2)]\r\n");
      out.write("            } else {\r\n");
      out.write("                return [topMiddle(n1), bottomMiddle(n2)]\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function rightMiddle (node) {\r\n");
      out.write("            return [node.col * colWidth + nodeWidth, node.row * rowHeight + nodeHeight / 2]\r\n");
      out.write("        }\r\n");
      out.write("        function leftMiddle (node) {\r\n");
      out.write("            return [node.col * colWidth, node.row * rowHeight + nodeHeight / 2]\r\n");
      out.write("        }\r\n");
      out.write("        function bottomMiddle (node) {\r\n");
      out.write("            return [node.col * colWidth + nodeWidth / 2, node.row * rowHeight + nodeHeight]\r\n");
      out.write("        }\r\n");
      out.write("        function topMiddle (node) {\r\n");
      out.write("            return [node.col * colWidth + nodeWidth / 2, node.row * rowHeight]\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        // 历史记录对象\r\n");
      out.write("       const FlowHistory = {\r\n");
      out.write("\t\t    paths: [],\r\n");
      out.write("\t\t    index: 1,\r\n");
      out.write("\t\t    push(item) {\r\n");
      out.write("\t\t        this.paths = this.paths.slice(0, this.index)\r\n");
      out.write("\t\t        this.paths.push(item)\r\n");
      out.write("\t\t        this.index = this.paths.length\r\n");
      out.write("\t\t    },\r\n");
      out.write("\t\t    back() {\r\n");
      out.write("\t\t        if (this.hasPrev()) {\r\n");
      out.write("\t\t            this.index = this.index - 1\r\n");
      out.write("\t\t        }\r\n");
      out.write("\t\t        return this.paths[this.index - 1]\r\n");
      out.write("\t\t    },\r\n");
      out.write("\t\t    next() {\r\n");
      out.write("\t\t        if (this.hasNext()) {\r\n");
      out.write("\t\t            this.index = this.index + 1\r\n");
      out.write("\t\t        }\r\n");
      out.write("\t\t        return this.paths[this.index - 1]\r\n");
      out.write("\t\t    },\r\n");
      out.write("\t\t    hasPrev() {\r\n");
      out.write("\t\t        return this.index > 1\r\n");
      out.write("\t\t    },\r\n");
      out.write("\t\t    hasNext() {\r\n");
      out.write("\t\t        return this.index < this.paths.length\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t}\r\n");
      out.write("    \r\n");
      out.write("        const flowChart = new Vue({\r\n");
      out.write("            el: '#board',\r\n");
      out.write("            data: {\r\n");
      out.write("                paper: null,\r\n");
      out.write("                pageId: 1,\r\n");
      out.write("                name: 'soni',\r\n");
      out.write("                nodes: [],\r\n");
      out.write("                lines: [],\r\n");
      out.write("                symbols: []\r\n");
      out.write("            },\r\n");
      out.write("            computed: {\r\n");
      out.write("                board () {\r\n");
      out.write("                    const rows = R.reduce((rows, node) => R.max(rows, node.row), 0, this.nodes) + 1\r\n");
      out.write("                    return {\r\n");
      out.write("                        height: rows * rowHeight + 'px'\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            methods: {\r\n");
      out.write("                loadPrevPage () {\r\n");
      out.write("                    if (FlowHistory.hasPrev()) {\r\n");
      out.write("                    \t//console.log(\"FlowHistory.back():\"+FlowHistory.back());\r\n");
      out.write("                    \t//FlowHistory.currentPaths();\r\n");
      out.write("                        this.loadPage(FlowHistory.back())\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                loadNextPage () {\r\n");
      out.write("                    if (FlowHistory.hasNext()) {\r\n");
      out.write("                        this.loadPage(FlowHistory.next())\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                loadNewPage (pageId) {\r\n");
      out.write("                    FlowHistory.push(pageId) \r\n");
      out.write("                    //FlowHistory.currentPaths();\r\n");
      out.write("                    this.loadPage(pageId)\r\n");
      out.write("                },\r\n");
      out.write("                goDetail(node){\r\n");
      out.write("            \t\t\r\n");
      out.write("            \t\tif(node.nextLowLevel){\r\n");
      out.write("            \t\t\t\r\n");
      out.write("            \t\t}else{\r\n");
      out.write("            \t\t\tchartId=node.chartId;\r\n");
      out.write("            \t\t\twindow.location.href=\"/ps/a/opedetail/opeDetail/opeDetail?isQualified=0&chartId=\"+chartId;\r\n");
      out.write("            \t\t}\r\n");
      out.write("            \t},\r\n");
      out.write("                loadPage (pageId) {\r\n");
      out.write("\r\n");
      out.write("                    this.clearBoard();\r\n");
      out.write("                    //请求后台数据\r\n");
      out.write("                    axios({\r\n");
      out.write("                        method:'post',\r\n");
      out.write("                        url:'");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ctx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/flowchart/flowChart/flowChartData?pageId='+pageId\r\n");
      out.write("                    }).then(res => {\r\n");
      out.write("                         this.renderBoard(res.data);\r\n");
      out.write("                    }) \r\n");
      out.write("                },\r\n");
      out.write("                renderBoard (data) {\r\n");
      out.write("                    this.nodes = data.nodes\r\n");
      out.write("                    this.lines = data.lines\r\n");
      out.write("                \r\n");
      out.write("                    var paper = this.paper || Snap(this.$refs.svg)\r\n");
      out.write("                    \r\n");
      out.write("                    R.forEach(line => {\r\n");
      out.write("                        const paths = this.linePath(line)\r\n");
      out.write("                        R.forEach(([x1, y1, x2, y2]) => {\r\n");
      out.write("                            const line = paper.line(x1, y1, x2, y2)\r\n");
      out.write("                            line.attr({\r\n");
      out.write("                                stroke: \"#1890FF\",\r\n");
      out.write("                                strokeWidth: 1\r\n");
      out.write("                            })\r\n");
      out.write("                        }, paths)\r\n");
      out.write("                        \r\n");
      out.write("                        const endPoint = paper.circle(paths[2][2], paths[2][3], 5)\r\n");
      out.write("                        endPoint.attr({\r\n");
      out.write("                            fill: \"#bada55\",\r\n");
      out.write("                            stroke: \"#1890FF\",\r\n");
      out.write("                            strokeWidth: 1\r\n");
      out.write("                        })\r\n");
      out.write("                        \r\n");
      out.write("                        const symbols = line.symbols || []\r\n");
      out.write("                        R.forEach(symbol => {\r\n");
      out.write("                            this.symbols.push(this.createSymbol(symbol, paths[1]))\r\n");
      out.write("                        }, symbols)\r\n");
      out.write("                    }, this.lines)\r\n");
      out.write("                    \r\n");
      out.write("                    this.paper = paper\r\n");
      out.write("                },\r\n");
      out.write("                clearBoard () {\r\n");
      out.write("                    this.nodes = []\r\n");
      out.write("                    this.lines = []\r\n");
      out.write("                    this.symbols = []\r\n");
      out.write("                    this.paper && this.paper.clear() \r\n");
      out.write("                },\r\n");
      out.write("                position (item) {\r\n");
      out.write("                    return {\r\n");
      out.write("                        left: item.col * colWidth + 'px',\r\n");
      out.write("                        top: item.row * rowHeight + 'px',\r\n");
      out.write("                        width: nodeWidth + 'px',\r\n");
      out.write("                        height: nodeHeight + 'px'\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                linePath (line) {\r\n");
      out.write("                    const sourceNode = R.find(R.propEq('id', line.source), this.nodes)\r\n");
      out.write("                    const targetNode = R.find(R.propEq('id', line.target), this.nodes)\r\n");
      out.write("                    \r\n");
      out.write("                    const [start, end] = points(sourceNode, targetNode)\r\n");
      out.write("                    \r\n");
      out.write("                    const middle = start[0] + (end[0] - start[0]) / 2\r\n");
      out.write("                    return [\r\n");
      out.write("                        [start[0], start[1], middle, start[1]],\r\n");
      out.write("                        [middle, start[1], middle, end[1]],\r\n");
      out.write("                        [middle, end[1], end[0], end[1]]\r\n");
      out.write("                    ]\r\n");
      out.write("                },\r\n");
      out.write("                createSymbol (symbol, line) {\r\n");
      out.write("                    const cy = line[1] + (line[3] - line[1]) / 2\r\n");
      out.write("                    const cx = line[0]\r\n");
      out.write("                    return Object.assign({\r\n");
      out.write("                        position: {\r\n");
      out.write("                            left: cx - symbolSide / 2 + 'px',\r\n");
      out.write("                            top: cy - symbolSide / 2 + 'px'\r\n");
      out.write("                        }\r\n");
      out.write("                    }, symbol)\r\n");
      out.write("                },\r\n");
      out.write("                positionSymbol (symbol) {\r\n");
      out.write("                    return symbol.position\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            mounted () {\r\n");
      out.write("            \tthis.loadNewPage(0)\r\n");
      out.write("            }\r\n");
      out.write("        })\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        document.querySelector('#flow-back').addEventListener('click', function(e){\r\n");
      out.write("            flowChart.loadPrevPage()\r\n");
      out.write("        }, false)\r\n");
      out.write("        \r\n");
      out.write("        document.querySelector('#flow-next').addEventListener('click', function(e){\r\n");
      out.write("            flowChart.loadNextPage()\r\n");
      out.write("        }, false)\r\n");
      out.write("      \r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fset_005f0.setParent(null);
    // /webpage/include/taglib.jsp(11,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f0.setVar("ctx");
    // /webpage/include/taglib.jsp(11,0) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}${fns:getAdminPath()}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, _jspx_fnmap_0, false));
    int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
    if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fset_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f1 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    _jspx_th_c_005fset_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fset_005f1.setParent(null);
    // /webpage/include/taglib.jsp(12,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f1.setVar("ctxStatic");
    // /webpage/include/taglib.jsp(12,0) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f1.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}/static", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
    int _jspx_eval_c_005fset_005f1 = _jspx_th_c_005fset_005f1.doStartTag();
    if (_jspx_th_c_005fset_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f1);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f1);
    return false;
  }
}
